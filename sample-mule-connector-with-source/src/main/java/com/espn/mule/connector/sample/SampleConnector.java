/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.espn.mule.connector.sample;

import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Connect;
import org.mule.api.annotations.ValidateConnection;
import org.mule.api.annotations.ConnectionIdentifier;
import org.mule.api.annotations.Disconnect;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.ConnectionException;
import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Processor;

import org.mule.api.annotations.Source;
import org.mule.api.callback.SourceCallback;

/**
 * Cloud Connector
 *
 * @author MuleSoft, Inc.
 */
@Connector(name="sample", schemaVersion="1.0-SNAPSHOT")
public class SampleConnector
{
    /**
     * Configurable
     */
    @Configurable
    private String myProperty;

    /**
     * Set property
     *
     * @param myProperty My property
     */
    public void setMyProperty(String myProperty)
    {
        this.myProperty = myProperty;
    }

    /**
     * Get property
     */
    public String getMyProperty()
    {
        return this.myProperty;
    }

    /**
     * Custom processor
     *
     * {@sample.xml ../../../doc/Sample-connector.xml.sample sample:my-processor}
     *
     * @param content Content to be processed
     * @return Some string
     */
    @Processor
    public String myProcessor(String content)
    {
        /*
         * MESSAGE PROCESSOR CODE GOES HERE
         */

        return content;
    }

   /**
     * generates a timestamp every second
     *
     * {@sample.xml ../../../doc/Sample-connector.xml.sample sample:ping-it}
     *
     * @param callback Callback to emit the timestamps
     */
    @Source
    @SuppressWarnings("SleepWhileInLoop")
    public synchronized void pingIt(SourceCallback callback) {
        while(true) {
            try {
                Long l = System.currentTimeMillis();
                callback.process(l);
            } catch(Throwable t){}
        }
    }
}